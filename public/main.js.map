{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./public/assets/flipmaster_spritesheet.js","webpack:///./src/bar.js","webpack:///./src/basket.js","webpack:///./src/constants.js","webpack:///./src/game.js","webpack:///./src/game_header.js","webpack:///./src/index.js","webpack:///./src/instructions.js","webpack:///./src/lever.js","webpack:///./src/sound.js","webpack:///./src/sphere.js","webpack:///./src/start_button.js","webpack:///./src/timer.js","webpack:///./src/utils.js","webpack:///./src/vector.js","webpack:///./src/welcome_bg.js","webpack:///./src/winner.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAe;AACf;AACA,YAAY,+BAA+B;AAC3C;AACA;AACA,uBAAuB,4BAA4B;AACnD,iBAAiB;AACjB,GAAG;AACH;AACA,YAAY,8BAA8B;AAC1C;AACA;AACA,uBAAuB,4BAA4B;AACnD,iBAAiB;AACjB,GAAG;AACH;AACA,YAAY,6BAA6B;AACzC;AACA;AACA,uBAAuB,4BAA4B;AACnD,iBAAiB;AACjB,GAAG;AACH;AACA,YAAY,6BAA6B;AACzC;AACA;AACA,uBAAuB,4BAA4B;AACnD,iBAAiB;AACjB,GAAG;AACH;AACA,YAAY,6BAA6B;AACzC;AACA;AACA,uBAAuB,2BAA2B;AAClD,iBAAiB;AACjB,GAAG;AACH;AACA,YAAY,6BAA6B;AACzC;AACA;AACA,uBAAuB,2BAA2B;AAClD,iBAAiB;AACjB,GAAG;AACH;AACA,YAAY,2BAA2B;AACvC;AACA;AACA,uBAAuB,2BAA2B;AAClD,iBAAiB;AACjB,GAAG;AACH;AACA,YAAY,gCAAgC;AAC5C;AACA;AACA,uBAAuB,6BAA6B;AACpD,iBAAiB;AACjB,GAAG;AACH;AACA,YAAY,+BAA+B;AAC3C;AACA;AACA,uBAAuB,6BAA6B;AACpD,iBAAiB;AACjB,GAAG;AACH;AACA,YAAY,+BAA+B;AAC3C;AACA;AACA,uBAAuB,6BAA6B;AACpD,iBAAiB;AACjB;AACA,CAAC;;;;;;;;;;;;;ACvED;AAAA;AAAA;AAAA;AAA6B;AACK;AAC8B;;AAEhE;AACA;AACA;;AAEA,cAAc,uDAAQ;;AAEtB;AACA;AACA;;AAEA;AACA,wBAAwB,+CAAM;AAC9B,KAAK;AACL,wBAAwB,+CAAM;AAC9B;;AAEA;AACA;;AAEA,WAAW,aAAa,GAAG,6EAAU;;AAErC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEe,kEAAG;;;;;;;;;;;;;AClDlB;AAAA;AAAA;AAAA;AACA;AACkC;AAC8B;;AAEhE;AACA;AACA;;AAEA,cAAc,uDAAQ;;AAEtB;AACA;AACA;AACA;;AAEA;AACA;;AAEA,WAAW,aAAa,GAAG,6EAAU;;AAErC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEe,qEAAM;;;;;;;;;;;;;ACzFrB;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;AClBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2B;AACJ;AACM;AACM;AACG;AACG;AACd;AACA;AACa;AACb;AACE;AACe;AACf;;AAE7B;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB,kDAAS;AAC/B;AACA;AACA;;AAEA;;AAEA,sBAAsB,8CAAK;AAC3B,8BAA8B,8CAAK;AACnC,6BAA6B,8CAAK;AAClC,oBAAoB,8CAAK;AACzB,4BAA4B,8CAAK;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,gDAAM;AAC1B,sBAAsB,oDAAiB;AACvC;;AAEA;AACA,oBAAoB,gDAAM;AAC1B,sBAAsB,oDAAU;AAChC;;AAEA;AACA,oBAAoB,gDAAM;AAC1B,sBAAsB,qDAAW;AACjC;;AAEA;AACA,oBAAoB,gDAAM;AAC1B,sBAAsB,qDAAY;AAClC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB,kDAAS;AAC/B;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,MAAM,kDAAS;AACf;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gDAAM;AAC9B,0BAA0B,gDAAM;AAChC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,gDAAM;AAC1B;AACA;AACA;AACA,oBAAoB,gDAAM;AAC1B,sBAAsB,+CAAI;AAC1B;;AAEA;AACA,oBAAoB,gDAAM;AAC1B,sBAAsB,8CAAK;AAC3B;;AAEA;AACA,sBAAsB,+CAAM,WAAW,gDAAM;AAC7C,sBAAsB,+CAAM,WAAW,gDAAM;AAC7C;;AAEA;AACA,sBAAsB,4CAAG,WAAW,gDAAM;AAC1C,sBAAsB,4CAAG,WAAW,gDAAM;AAC1C,sBAAsB,4CAAG,WAAW,gDAAM;AAC1C,sBAAsB,4CAAG,WAAW,gDAAM;AAC1C,sBAAsB,4CAAG,WAAW,gDAAM;AAC1C,sBAAsB,4CAAG,WAAW,gDAAM;AAC1C;;AAEA;AACA,sBAAsB,4CAAG,WAAW,gDAAM;AAC1C,sBAAsB,4CAAG,WAAW,gDAAM;AAC1C,sBAAsB,4CAAG,WAAW,gDAAM;AAC1C,sBAAsB,4CAAG,WAAW,gDAAM;AAC1C,sBAAsB,4CAAG,WAAW,gDAAM;AAC1C,sBAAsB,4CAAG,WAAW,gDAAM;AAC1C;;AAEA;AACA,sBAAsB,8CAAK,WAAW,gDAAM;AAC5C,sBAAsB,8CAAK,WAAW,gDAAM;AAC5C,sBAAsB,8CAAK,WAAW,gDAAM;AAC5C,sBAAsB,8CAAK,WAAW,gDAAM;AAC5C,sBAAsB,8CAAK,WAAW,gDAAM;AAC5C,sBAAsB,8CAAK,WAAW,gDAAM;AAC5C,sBAAsB,8CAAK,WAAW,gDAAM;AAC5C,sBAAsB,8CAAK,WAAW,gDAAM;AAC5C,sBAAsB,8CAAK,WAAW,gDAAM;AAC5C,sBAAsB,8CAAK,WAAW,gDAAM;AAC5C,sBAAsB,8CAAK,WAAW,gDAAM;AAC5C,sBAAsB,8CAAK,WAAW,gDAAM;AAC5C,sBAAsB,8CAAK,WAAW,gDAAM;AAC5C,sBAAsB,8CAAK,WAAW,gDAAM;AAC5C,sBAAsB,8CAAK,WAAW,gDAAM;AAC5C,sBAAsB,8CAAK,WAAW,gDAAM;AAC5C,sBAAsB,8CAAK,WAAW,gDAAM;AAC5C,sBAAsB,8CAAK,WAAW,gDAAM;AAC5C,sBAAsB,8CAAK,WAAW,gDAAM;AAC5C,sBAAsB,8CAAK,WAAW,gDAAM;AAC5C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,QAAQ,kDAAS;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO,kDAAS;AAChB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA,gCAAgC,kDAAS;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,mEAAI;;;;;;;;;;;;;AChXnB;AAAA;AAAA;AAAA;AACA;AACkC;AAC8B;;AAEhE;AACA;AACA;;AAEA,cAAc,uDAAQ;;AAEtB;AACA;;AAEA;AACA;;AAEA,WAAW,aAAa,GAAG,6EAAU;;AAErC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,yEAAU;;;;;;;;;;;;;ACxCzB;AAAA;AAAyB;;AAEzB;AACA;AACA,mBAAmB,6CAAI;AACvB,CAAC;;;;;;;;;;;;;ACLD;AAAA;AAAA;AAAA;AAA6B;AACK;AAC8B;;AAEhE;AACA;AACA;;AAEA,cAAc,uDAAQ;AACtB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS,aAAa,GAAG,6EAAU;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS,aAAa,GAAG,6EAAU;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS,aAAa,GAAG,6EAAU;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEe,2EAAY;;;;;;;;;;;;;ACvL3B;AAAA;AAAA;AAAA;AAA6B;AACK;AAC8B;;AAEhE;AACA;AACA;;AAEA,cAAc,uDAAQ;AACtB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,aAAa,aAAa,GAAG,6EAAU;AACvC;AACA;AACA;AACA,wBAAwB,+CAAM;AAC9B,KAAK;AACL,aAAa,aAAa,GAAG,6EAAU;AACvC;AACA;AACA;AACA,wBAAwB,+CAAM;AAC9B,KAAK;AACL,aAAa,aAAa,GAAG,6EAAU;AACvC;AACA;AACA,wBAAwB,+CAAM;AAC9B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,eAAe,aAAa,GAAG,6EAAU;AACzC;AACA;AACA;AACA,0BAA0B,+CAAM;AAChC;AACA,OAAO;AACP,eAAe,aAAa,GAAG,6EAAU;AACzC;AACA;AACA;AACA,0BAA0B,+CAAM;AAChC;AACA,OAAO;AACP,eAAe,aAAa,GAAG,6EAAU;AACzC;AACA;AACA;AACA,0BAA0B,+CAAM;AAChC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,WAAW,aAAa,GAAG,6EAAU;AACrC;AACA;AACA;AACA,sBAAsB,+CAAM;AAC5B;AACA;AACA;;AAEA;AACA,WAAW,aAAa,GAAG,6EAAU;AACrC;AACA;AACA;AACA;AACA,sBAAsB,+CAAM;AAC5B;AACA;AACA;;AAEe,oEAAK;;;;;;;;;;;;;ACjIpB;AAAA;AACA;AACA;AACA;AACA;AACA,uBAAuB,aAAa;AACpC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEe,oEAAK;;;;;;;;;;;;;AClBpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACmC;AACR;AACE;AACK;AAC8B;;AAEhE;AACA;AACA;;AAEA,cAAc,uDAAQ;;AAEtB;AACA;AACA;AACA;AACA,uBAAuB,+CAAM,IAAI,kDAAS;AAC1C;;AAEA;;AAEA;AACA;;AAEA,WAAW,aAAa,GAAG,6EAAU;AACrC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,+CAAM;AACrB,eAAe,+CAAM;AACrB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,kDAAS;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,+CAAM;AACnC;AACA,WAAW;AACX;AACA;;AAEA;AACA,SAAS;AACT;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEe,qEAAM;;AAErB;;;;;;;;;;;;;ACvRA;AAAA;AAAA;AAAA;AAA6B;AACK;AAC8B;;AAEhE;AACA;AACA;;AAEA,cAAc,uDAAQ;AACtB;AACA;;AAEA;AACA;;AAEA,WAAW,aAAa,GAAG,6EAAU;AACrC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEe,0EAAW;;;;;;;;;;;;;AC5D1B;AAAA;AAAA;AAAA;AAAmC;AACN;AACK;;AAElC;AACA;AACA;;AAEA,cAAc,uDAAQ;;AAEtB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,kDAAS;AACpD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEe,oEAAK;;;;;;;;;;;;;AC7CpB;AAAA;AAAA;AAAO;AACP;;AAEO;AACP;AACA;AACA,qBAAqB,YAAY;AACjC;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACXA;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEe,qEAAM;;;;;;;;;;;;;ACjDrB;AAAA;AAAkC;;AAElC;AACA;AACA;;AAEA,cAAc,uDAAQ;AACtB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEe,gFAAiB;;;;;;;;;;;;;AC3BhC;AAAA;AAAA;AAAA;AACA;AACkC;AAC8B;;AAEhE;AACA;AACA;;AAEA,cAAc,uDAAQ;;AAEtB;AACA;AACA;;AAEA;AACA;;AAEA;AACA,aAAa,aAAa,GAAG,6EAAU;AACvC;AACA;AACA,KAAK;AACL,aAAa,aAAa,GAAG,6EAAU;AACvC;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEe,qEAAM","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","export default {\n  'bar.png': {\n    frame: { x: 491, y: 91, w: 23, h: 100 },\n    rotated: false,\n    trimmed: false,\n    spriteSourceSize: { x: 0, y: 0, w: 23, h: 100 },\n    sourceSize: { w: 23, h: 100 }\n  },\n  'basket.png': {\n    frame: { x: 278, y: 0, w: 290, h: 91 },\n    rotated: false,\n    trimmed: false,\n    spriteSourceSize: { x: 0, y: 0, w: 290, h: 91 },\n    sourceSize: { w: 290, h: 91 }\n  },\n  'game_header.png': {\n    frame: { x: 0, y: 91, w: 491, h: 99 },\n    rotated: false,\n    trimmed: false,\n    spriteSourceSize: { x: 0, y: 0, w: 491, h: 99 },\n    sourceSize: { w: 491, h: 99 }\n  },\n  'lever_2.png': {\n    frame: { x: 20, y: 0, w: 100, h: 36 },\n    rotated: false,\n    trimmed: false,\n    spriteSourceSize: { x: 0, y: 0, w: 100, h: 36 },\n    sourceSize: { w: 100, h: 36 }\n  },\n  'lever_45.png': {\n    frame: { x: 120, y: 0, w: 79, h: 79 },\n    rotated: false,\n    trimmed: false,\n    spriteSourceSize: { x: 0, y: 0, w: 79, h: 79 },\n    sourceSize: { w: 79, h: 79 }\n  },\n  'lever_neg45.png': {\n    frame: { x: 199, y: 0, w: 79, h: 79 },\n    rotated: false,\n    trimmed: false,\n    spriteSourceSize: { x: 0, y: 0, w: 79, h: 79 },\n    sourceSize: { w: 79, h: 79 }\n  },\n  'sphere.png': {\n    frame: { x: 0, y: 0, w: 20, h: 20 },\n    rotated: false,\n    trimmed: false,\n    spriteSourceSize: { x: 0, y: 0, w: 20, h: 20 },\n    sourceSize: { w: 20, h: 20 }\n  },\n  'start.png': {\n    frame: { x: 514, y: 91, w: 268, h: 107 },\n    rotated: false,\n    trimmed: false,\n    spriteSourceSize: { x: 0, y: 0, w: 268, h: 107 },\n    sourceSize: { w: 268, h: 107 }\n  },\n  'you_lost.jpg': {\n    frame: { x: 0, y: 198, w: 686, h: 414 },\n    rotated: false,\n    trimmed: false,\n    spriteSourceSize: { x: 0, y: 0, w: 686, h: 414 },\n    sourceSize: { w: 686, h: 414 }\n  },\n  'you_won.jpg': {\n    frame: { x: 0, y: 612, w: 686, h: 414 },\n    rotated: false,\n    trimmed: false,\n    spriteSourceSize: { x: 0, y: 0, w: 686, h: 414 },\n    sourceSize: { w: 686, h: 414 }\n  }\n}\n","import Vector from './vector'\nimport { randomId } from './utils'\nimport spriteMeta from '../public/assets/flipmaster_spritesheet'\n\nclass Bar {\n  constructor(game, pos, activeSide) {\n    this.type = 'bar'\n\n    this.id = randomId()\n\n    this.game = game\n    this.pos = pos\n    this.activeSide = activeSide\n\n    if (activeSide === 'right') {\n      this.vector = new Vector(0, 1)\n    } else {\n      this.vector = new Vector(0, -1)\n    }\n\n    this.img = new Image()\n    this.img.src = this.game.spriteSheet\n\n    const { x, y, w, h } = spriteMeta['bar.png'].frame\n\n    this.spriteCoordinates = [x, y, w, h]\n    this.size = [w, h]\n\n    this.draw = this.draw.bind(this)\n  }\n\n  update(ctx) {\n    this.draw(ctx)\n  }\n\n  draw(ctx) {\n    ctx.drawImage(\n      this.img,\n      ...this.spriteCoordinates,\n      this.pos.x(),\n      this.pos.y(),\n      ...this.size\n    )\n  }\n\n  slide(slide) {\n    this.pos.value[0] += slide\n  }\n}\n\nexport default Bar\n","/* eslint-disable one-var */\n/* eslint-disable class-methods-use-this */\nimport { randomId } from './utils'\nimport spriteMeta from '../public/assets/flipmaster_spritesheet'\n\nclass Basket {\n  constructor(game, pos, side) {\n    this.type = 'basket'\n\n    this.id = randomId()\n\n    this.game = game\n    this.pos = pos\n    this.side = side\n    this.spheres = {}\n\n    this.img = new Image()\n    this.img.src = this.game.spriteSheet\n\n    const { x, y, w, h } = spriteMeta['basket.png'].frame\n\n    this.spriteCoordinates = [x, y, w, h]\n    this.size = [w, h]\n\n    this.draw = this.draw.bind(this)\n  }\n\n  update(ctx) {\n    this.draw(ctx)\n  }\n\n  draw(ctx) {\n    ctx.drawImage(\n      this.img,\n      ...this.spriteCoordinates,\n      this.pos.x(),\n      this.pos.y(),\n      ...this.size\n    )\n\n    // ellipse for score\n    let centerX, centerY, color\n    if (this.side === 'left') {\n      centerX = 250\n      centerY = 700\n      color = 'red'\n    } else {\n      centerX = 550\n      centerY = 700\n      color = 'green'\n    }\n    this.drawEllipse(ctx, centerX, centerY, 150, 80, color)\n\n    // ctx.fillStyle = this.side === 'left' ? 'red' : 'green'\n    ctx.font = '40px Comic Sans MS'\n    ctx.fillStyle = 'white'\n    ctx.textAlign = 'center'\n    ctx.fillText(Object.keys(this.spheres).length, centerX, centerY + 10)\n  }\n\n  drawEllipse(ctx, centerX, centerY, width, height, color) {\n    ctx.beginPath()\n\n    ctx.moveTo(centerX, centerY - height / 2) // A1\n\n    ctx.bezierCurveTo(\n      centerX + width / 2,\n      centerY - height / 2,\n      centerX + width / 2,\n      centerY + height / 2,\n      centerX,\n      centerY + height / 2\n    )\n\n    ctx.bezierCurveTo(\n      centerX - width / 2,\n      centerY + height / 2,\n      centerX - width / 2,\n      centerY - height / 2,\n      centerX,\n      centerY - height / 2\n    )\n\n    ctx.fillStyle = color\n    ctx.fill()\n    ctx.closePath()\n  }\n}\n\nexport default Basket\n","const GRAVITY = 0.3\nconst INTERVAL_BETWEEN_SPHERES = 2000\nconst PIXEL_CHECK = 5\nconst HUMAN_TIME = 5000\nconst NUMBER_CHANGED_BY_COMPUTER = 3\nconst NUMBER_CHANGED_BY_HUMAN = 3\nconst MAXIMUM_SLIDE = 50\nconst SLIDE_DELTA = 0.1\n\nexport default {\n  GRAVITY,\n  INTERVAL_BETWEEN_SPHERES,\n  PIXEL_CHECK,\n  HUMAN_TIME,\n  NUMBER_CHANGED_BY_COMPUTER,\n  MAXIMUM_SLIDE,\n  SLIDE_DELTA,\n  NUMBER_CHANGED_BY_HUMAN\n}\n","import Ball from './sphere'\nimport Bar from './bar'\nimport Basket from './basket'\nimport Constants from './constants'\nimport GameHeader from './game_header'\nimport Instructions from './instructions'\nimport Lever from './lever'\nimport Sound from './sound'\nimport StartButton from './start_button'\nimport Timer from './timer'\nimport Vector from './vector'\nimport WelcomeBackground from './welcome_bg'\nimport Winner from './winner'\n\nclass Game {\n  constructor(canvas) {\n    this.canvas = canvas\n    this.ctx = canvas.getContext('2d')\n\n    this.spriteSheet = './assets/flipmaster_spritesheet.png'\n\n    this.gameAssets = {}\n    this.lowerLeft = {}\n    this.lowerRight = {}\n    this.upperLeft = {}\n    this.upperRight = {}\n\n    this.slide = 0\n    this.slideDelta = Constants.SLIDE_DELTA\n    this.timeElapsed = 0\n    this.leversChanged = 0\n    this.winnerAnnounced = false\n\n    this.currentPlayer = 'human'\n\n    this.bounce = new Sound('./assets/sounds/bounce.mp3', 5, 0.3)\n    this.goodBasketDrop = new Sound('./assets/sounds/good_basket.mp3', 1, 0.5)\n    this.badBasketDrop = new Sound('./assets/sounds/bad_basket.mp3', 1, 0.5)\n    this.flip = new Sound('./assets/sounds/flip.mp3')\n    this.computerFlip = new Sound('./assets/sounds/computer_flip.mp3')\n\n    this.update = this.update.bind(this)\n    this.clearCanvas = this.clearCanvas.bind(this)\n    this.addAsset = this.addAsset.bind(this)\n    this.addBall = this.addBall.bind(this)\n    this.computerPlay = this.computerPlay.bind(this)\n    this.switchToComputer = this.switchToComputer.bind(this)\n    this.startCycle = this.startCycle.bind(this)\n    this.incrementTime = this.incrementTime.bind(this)\n    this.stop = this.stop.bind(this)\n    this.removeWinnerDisplay = this.removeWinnerDisplay.bind(this)\n    this.removeStartButton = this.removeStartButton.bind(this)\n    this.start = this.start.bind(this)\n    this.emptyBaskets = this.emptyBaskets.bind(this)\n    this.resetLevers = this.resetLevers.bind(this)\n    this.displayWelcomeBackground = this.displayWelcomeBackground.bind(this)\n    this.displayGameHeader = this.displayGameHeader.bind(this)\n    this.displayStartButton = this.displayStartButton.bind(this)\n    this.displayInstructions = this.displayInstructions.bind(this)\n    this.addBaskets = this.addBaskets.bind(this)\n    this.buildLeftWall = this.buildLeftWall.bind(this)\n    this.buildRightWall = this.buildRightWall.bind(this)\n    this.buildLevers = this.buildLevers.bind(this)\n\n    this.animFrame = window.requestAnimationFrame(this.update)\n\n    this.displayStaticGameAssets()\n    this.displayWelcomePage()\n  }\n\n  displayStaticGameAssets() {\n    this.addBaskets()\n    this.buildLeftWall()\n    this.buildRightWall()\n    this.buildLevers()\n  }\n\n  displayWelcomePage() {\n    this.displayWelcomeBackground()\n    this.displayGameHeader()\n    this.displayStartButton()\n    this.displayInstructions()\n  }\n\n  displayWelcomeBackground() {\n    const pos = new Vector(50, 150)\n    this.addAsset(new WelcomeBackground(this, pos))\n  }\n\n  displayGameHeader() {\n    const pos = new Vector(275, 180)\n    this.addAsset(new GameHeader(this, pos))\n  }\n\n  displayStartButton() {\n    const pos = new Vector(260, 640)\n    this.addAsset(new StartButton(this, pos))\n  }\n\n  displayInstructions() {\n    const pos = new Vector(400, 275)\n    this.addAsset(new Instructions(this, pos))\n  }\n\n  update() {\n    this.clearCanvas()\n    this.slideFrame()\n    Object.values(this.gameAssets).forEach(asset => asset.update(this.ctx))\n    this.animFrame = window.requestAnimationFrame(this.update)\n    this.checkForWin()\n  }\n\n  clearCanvas() {\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\n    const grd = this.ctx.createLinearGradient(800, 0, 800, 800)\n    grd.addColorStop(0, 'black')\n    grd.addColorStop(1, 'white')\n    this.ctx.fillStyle = grd\n    this.ctx.fillRect(0, 0, 800, 800)\n  }\n\n  ///////////////////\n\n  start() {\n    this.gameAssets = {}\n    this.lowerLeft = {}\n    this.lowerRight = {}\n    this.upperLeft = {}\n    this.upperRight = {}\n\n    this.slide = 0\n    this.slideDelta = Constants.SLIDE_DELTA\n    this.timeElapsed = 0\n    this.winnerAnnounced = false\n\n    this.currentPlayer = 'human'\n\n    this.addBaskets()\n    this.buildLeftWall()\n    this.buildRightWall()\n    this.buildLevers()\n\n    this.animFrame = window.requestAnimationFrame(this.update)\n\n    this.addTimer()\n\n    this.addBall()\n\n    this.ballAdder = window.setInterval(\n      this.addBall,\n      Constants.INTERVAL_BETWEEN_SPHERES\n    )\n\n    this.gameStopped = false\n    this.startCycle()\n  }\n\n  stop() {\n    window.clearInterval(this.ballAdder)\n    window.clearInterval(this.timerInterval)\n    window.clearInterval(this.switchTimer)\n\n    this.gameStopped = true\n    Object.values(this.gameAssets).forEach(asset => {\n      if (asset.type === 'sphere') {\n        delete this.gameAssets[asset.id]\n      }\n    })\n  }\n\n  emptyBaskets() {\n    Object.values(this.gameAssets).forEach(asset => {\n      if (asset.type === 'basket') {\n        asset.spheres = {}\n      }\n    })\n  }\n\n  resetLevers() {\n    Object.values(this.gameAssets).forEach(asset => {\n      if (asset.type === 'lever') {\n        asset.flipToFlat()\n      }\n    })\n  }\n\n  removeWinnerDisplay() {\n    const disp = Object.values(this.gameAssets).filter(\n      asset => asset.type === 'winner'\n    )[0]\n    if (disp) delete this.gameAssets[disp.id]\n  }\n\n  removeStartButton() {\n    const btn = Object.values(this.gameAssets).filter(\n      asset => asset.type === 'start_btn'\n    )[0]\n    if (btn) delete this.gameAssets[btn.id]\n  }\n\n  checkForWin() {\n    const basket = Object.values(this.gameAssets).filter(\n      asset =>\n        asset.type === 'basket' && Object.values(asset.spheres).length >= 20\n    )\n    if (basket[0]) {\n      const win = basket[0].side === 'right'\n      if (!this.winnerAnnounced) {\n        this.winnerAnnounced = true\n        const pos = new Vector(50, 200)\n        this.addAsset(new Winner(this, pos, win))\n        this.stop()\n      }\n    }\n  }\n\n  addAsset(asset) {\n    this.gameAssets[asset.id] = asset\n    if (asset.type !== 'sphere') {\n      if (asset.pos.x() <= 400 && asset.pos.y() >= 400) {\n        this.lowerLeft[asset.id] = asset\n      } else if (asset.pos.x() > 400 && asset.pos.y() >= 400) {\n        this.lowerRight[asset.id] = asset\n      } else if (asset.pos.x() <= 400 && asset.pos.y() < 400) {\n        this.upperLeft[asset.id] = asset\n      } else {\n        this.upperRight[asset.id] = asset\n      }\n    }\n  }\n\n  delete(asset) {\n    delete this.gameAssets[asset.id]\n    delete this.lowerLeft[asset.id]\n    delete this.lowerRight[asset.id]\n    delete this.upperLeft[asset.id]\n    delete this.upperRight[asset.id]\n  }\n\n  addBall() {\n    const pos = new Vector(\n      110 + this.slide + Math.random() * 600,\n      -10 - Math.random() * 100\n    )\n    const vel = new Vector(0, 0)\n    this.addAsset(new Ball(this, pos, vel))\n  }\n\n  addTimer() {\n    const pos = new Vector(400, 730)\n    this.addAsset(new Timer(this, pos))\n  }\n\n  addBaskets() {\n    this.addAsset(new Basket(this, new Vector(100, 650), 'left'))\n    this.addAsset(new Basket(this, new Vector(410, 650), 'right'))\n  }\n\n  buildLeftWall() {\n    this.addAsset(new Bar(this, new Vector(85, 50), 'right'))\n    this.addAsset(new Bar(this, new Vector(85, 150), 'right'))\n    this.addAsset(new Bar(this, new Vector(85, 250), 'right'))\n    this.addAsset(new Bar(this, new Vector(85, 350), 'right'))\n    this.addAsset(new Bar(this, new Vector(85, 450), 'right'))\n    this.addAsset(new Bar(this, new Vector(85, 550), 'right'))\n  }\n\n  buildRightWall() {\n    this.addAsset(new Bar(this, new Vector(700, 50), 'left'))\n    this.addAsset(new Bar(this, new Vector(700, 150), 'left'))\n    this.addAsset(new Bar(this, new Vector(700, 250), 'left'))\n    this.addAsset(new Bar(this, new Vector(700, 350), 'left'))\n    this.addAsset(new Bar(this, new Vector(700, 450), 'left'))\n    this.addAsset(new Bar(this, new Vector(700, 550), 'left'))\n  }\n\n  buildLevers() {\n    this.addAsset(new Lever(this, new Vector(100, 100), 0))\n    this.addAsset(new Lever(this, new Vector(300, 100), 0))\n    this.addAsset(new Lever(this, new Vector(500, 100), 0))\n    this.addAsset(new Lever(this, new Vector(200, 200), 0))\n    this.addAsset(new Lever(this, new Vector(400, 200), 0))\n    this.addAsset(new Lever(this, new Vector(600, 200), 0))\n    this.addAsset(new Lever(this, new Vector(100, 300), 0))\n    this.addAsset(new Lever(this, new Vector(200, 300), 0))\n    this.addAsset(new Lever(this, new Vector(300, 300), 0))\n    this.addAsset(new Lever(this, new Vector(400, 300), 0))\n    this.addAsset(new Lever(this, new Vector(500, 300), 0))\n    this.addAsset(new Lever(this, new Vector(600, 300), 0))\n    this.addAsset(new Lever(this, new Vector(300, 400), 0))\n    this.addAsset(new Lever(this, new Vector(400, 400), 0))\n    this.addAsset(new Lever(this, new Vector(100, 500), 0))\n    this.addAsset(new Lever(this, new Vector(200, 500), 0))\n    this.addAsset(new Lever(this, new Vector(300, 500), 0))\n    this.addAsset(new Lever(this, new Vector(400, 500), 0))\n    this.addAsset(new Lever(this, new Vector(500, 500), 0))\n    this.addAsset(new Lever(this, new Vector(600, 500), 0))\n  }\n\n  startCycle() {\n    if (this.gameStopped) return\n    if (this.currentPlayer === 'computer') {\n      window.clearInterval(this.timerInterval)\n      window.clearInterval(this.switchTimer)\n      this.computerPlay()\n    } else {\n      this.leversChanged = 0\n      this.switchTimer = window.setTimeout(\n        this.switchToComputer,\n        Constants.HUMAN_TIME\n      )\n      this.timerStartTime = Date.now()\n      this.timerInterval = window.setInterval(this.incrementTime, 100)\n    }\n  }\n\n  incrementTime() {\n    this.timeElapsed =\n      ((Date.now() - this.timerStartTime) / 1000) %\n      (Constants.HUMAN_TIME / 1000)\n  }\n\n  switchToComputer() {\n    this.currentPlayer = 'computer'\n    this.startCycle()\n  }\n\n  computerPlay() {\n    const levers = Object.values(this.gameAssets).filter(\n      asset => asset.type === 'lever' && asset.rotation !== 45\n    )\n    let selected = []\n    if (levers.length <= this.leversChanged / 2 + 1) {\n      selected = levers\n    } else {\n      while (selected.length < this.leversChanged / 2 + 1) {\n        const random = levers[Math.floor(Math.random() * levers.length)]\n        if (selected.indexOf(random) === -1) selected.push(random)\n      }\n    }\n    selected.forEach(lever => {\n      if (lever.rotation === 0) {\n        lever.flipTo45()\n      } else {\n        lever.flipToFlat()\n      }\n    })\n    this.currentPlayer = 'human'\n    this.leversChanged = 0\n    this.startCycle()\n  }\n\n  slideFrame() {\n    if (Math.abs(this.slide) >= Constants.MAXIMUM_SLIDE) {\n      this.slideDelta = -1 * this.slideDelta\n    }\n    Object.values(this.gameAssets)\n      .filter(\n        asset =>\n          asset.type === 'lever' ||\n          asset.type === 'bar' ||\n          asset.type === 'sphere'\n      )\n      .forEach(asset => asset.slide(this.slideDelta))\n    this.slide += this.slideDelta\n  }\n}\n\nexport default Game\n","/* eslint-disable one-var */\n/* eslint-disable class-methods-use-this */\nimport { randomId } from './utils'\nimport spriteMeta from '../public/assets/flipmaster_spritesheet'\n\nclass GameHeader {\n  constructor(game, pos) {\n    this.type = 'game_header'\n\n    this.id = randomId()\n\n    this.game = game\n    this.pos = pos\n\n    this.img = new Image()\n    this.img.src = this.game.spriteSheet\n\n    const { x, y, w, h } = spriteMeta['game_header.png'].frame\n\n    this.spriteCoordinates = [x, y, w, h]\n    this.size = [w / 2, h / 2]\n\n    this.draw = this.draw.bind(this)\n  }\n\n  update(ctx) {\n    this.draw(ctx)\n  }\n\n  draw(ctx) {\n    ctx.drawImage(\n      this.img,\n      ...this.spriteCoordinates,\n      this.pos.x(),\n      this.pos.y(),\n      ...this.size\n    )\n  }\n}\n\nexport default GameHeader\n","import Game from './game'\n\nwindow.addEventListener('DOMContentLoaded', event => {\n  const canvas = document.getElementById('canvas')\n  const game = new Game(canvas)\n})\n","import Vector from './vector'\nimport { randomId } from './utils'\nimport spriteMeta from '../public/assets/flipmaster_spritesheet'\n\nclass Instructions {\n  constructor(game, pos) {\n    this.type = 'instructions'\n\n    this.id = randomId()\n    this.game = game\n    this.pos = pos\n\n    this.draw = this.draw.bind(this)\n    this.wrapText = this.wrapText.bind(this)\n  }\n\n  update(ctx) {\n    this.draw(ctx)\n  }\n\n  line_1(ctx) {\n    ctx.font = '25px Comic Sans MS'\n    ctx.fillStyle = 'white'\n    ctx.textAlign = 'center'\n    this.wrapText(\n      ctx,\n      \"Let's Play Flipmaster!\",\n      this.pos.x(),\n      this.pos.y(),\n      500,\n      35\n    )\n  }\n\n  line_2(ctx) {\n    ctx.font = '15px Comic Sans MS'\n    this.wrapText(\n      ctx,\n      `You job is to get more balls falling into your basket (green) than fall into the other (red) one.  First to collect 20 balls wins! `,\n      this.pos.x(),\n      this.pos.y() + 35,\n      500,\n      25\n    )\n  }\n\n  squishy(ctx) {\n    const squishy = new Image()\n    squishy.src = this.game.spriteSheet\n    let { x, y, w, h } = spriteMeta['lever_2.png'].frame\n    let spriteCoordinates = [x, y, w, h]\n    let size = [w, h]\n    ctx.drawImage(\n      squishy,\n      ...spriteCoordinates,\n      this.pos.x() - 320,\n      this.pos.y() + 100,\n      ...size\n    )\n  }\n\n  line_3(ctx) {\n    ctx.textAlign = 'left'\n    ctx.font = '20px Comic Sans MS'\n    this.wrapText(\n      ctx,\n      `Sticky Pads trap spheres and slow them down..`,\n      this.pos.x() - 200,\n      this.pos.y() + 120,\n      500,\n      25\n    )\n  }\n\n  line_4(ctx) {\n    ctx.textAlign = 'left'\n    ctx.font = '20px Comic Sans MS'\n    this.wrapText(\n      ctx,\n      `Click them on the left side to get a`,\n      this.pos.x() - 200,\n      this.pos.y() + 175,\n      500,\n      25\n    )\n  }\n\n  fortyfive(ctx) {\n    const fortyfive = new Image()\n    fortyfive.src = this.game.spriteSheet\n    let { x, y, w, h } = spriteMeta['lever_45.png'].frame\n    let spriteCoordinates = [x, y, w, h]\n    let size = [w, h]\n    ctx.drawImage(\n      fortyfive,\n      ...spriteCoordinates,\n      this.pos.x() + 150,\n      this.pos.y() + 130,\n      ...size\n    )\n  }\n\n  line_5(ctx) {\n    ctx.textAlign = 'left'\n    ctx.font = '20px Comic Sans MS'\n    this.wrapText(\n      ctx,\n      `and on the right side to get a`,\n      this.pos.x() - 300,\n      this.pos.y() + 240,\n      500,\n      25\n    )\n  }\n\n  negfortyfive(ctx) {\n    const lever_neg45 = new Image()\n    lever_neg45.src = this.game.spriteSheet\n    let { x, y, w, h } = spriteMeta['lever_neg45.png'].frame\n    let spriteCoordinates = [x, y, w, h]\n    let size = [w, h]\n    ctx.drawImage(\n      lever_neg45,\n      ...spriteCoordinates,\n      this.pos.x(),\n      this.pos.y() + 190,\n      ...size\n    )\n  }\n\n  line_6(ctx) {\n    ctx.textAlign = 'left'\n    ctx.font = '20px Comic Sans MS'\n    this.wrapText(\n      ctx,\n      `BUT... There's a catch.  Each time the timer resets, the computer will flip ONE MORE than you did on your last turn.`,\n      this.pos.x() - 300,\n      this.pos.y() + 320,\n      600,\n      25\n    )\n  }\n\n  draw(ctx) {\n    this.line_1(ctx)\n    this.line_2(ctx)\n    this.squishy(ctx)\n    this.line_3(ctx)\n    this.line_4(ctx)\n    this.fortyfive(ctx)\n    this.line_5(ctx)\n    this.negfortyfive(ctx)\n    this.line_6(ctx)\n  }\n\n  wrapText(ctx, text, x, y, maxWidth, lineHeight) {\n    const words = text.split(' ')\n    const lines = []\n    let idx = 0\n    words.forEach(word => {\n      if (!lines[idx]) {\n        lines[idx] = word\n      } else {\n        const dimData = ctx.measureText(lines[idx] + ' ' + word)\n        if (dimData.width <= maxWidth) {\n          lines[idx] += ' ' + word\n        } else {\n          idx++\n          lines[idx] = word\n        }\n      }\n    })\n    lines.forEach(line => {\n      ctx.fillText(line, x, y)\n      y += lineHeight\n    })\n  }\n\n  slide(slide) {\n    //\n  }\n}\n\nexport default Instructions\n","import Vector from './vector'\nimport { randomId } from './utils'\nimport spriteMeta from '../public/assets/flipmaster_spritesheet'\n\nclass Lever {\n  constructor(game, pos, rotation) {\n    this.type = 'lever'\n\n    this.id = randomId()\n    this.game = game\n    this.originalY = pos.value[1]\n    this.pos = pos\n    this.rotation = rotation\n\n    this.diagonalAdjustment = -25\n\n    this.img = new Image()\n    this.img.src = this.game.spriteSheet\n\n    if (rotation === 45) {\n      const { x, y, w, h } = spriteMeta['lever_45.png'].frame\n      this.spriteCoordinates = [x, y, w, h]\n      this.size = [w, h]\n      this.pos.value[1] += this.diagonalAdjustment\n      this.vector = new Vector(1, -1)\n    } else if (rotation === -45) {\n      const { x, y, w, h } = spriteMeta['lever_neg45.png'].frame\n      this.spriteCoordinates = [x, y, w, h]\n      this.size = [w, h]\n      this.pos.value[1] += this.diagonalAdjustment\n      this.vector = new Vector(1, 1)\n    } else {\n      const { x, y, w, h } = spriteMeta['lever_2.png'].frame\n      this.spriteCoordinates = [x, y, w, h]\n      this.size = [w, h]\n      this.vector = new Vector(1, 0)\n    }\n\n    this.draw = this.draw.bind(this)\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  update(ctx) {\n    if (this.game.currentPlayer !== 'computer') {\n      window.addEventListener('click', this.handleClick)\n    } else {\n      window.removeEventListener('click', this.handleClick)\n    }\n    this.draw(ctx)\n  }\n\n  draw(ctx) {\n    ctx.drawImage(\n      this.img,\n      ...this.spriteCoordinates,\n      this.pos.x(),\n      this.pos.y(),\n      ...this.size\n    )\n  }\n\n  handleClick(e) {\n    e.stopPropagation()\n    const bbox_ul_x = this.pos.x()\n    const bbox_ul_y = this.pos.y()\n    const bbox_lr_x = bbox_ul_x + this.size[0]\n    const bbox_lr_y = bbox_ul_y + this.size[1]\n\n    const rect = this.game.canvas.getBoundingClientRect()\n    const x = e.clientX - rect.left\n    const y = e.clientY - rect.top\n\n    if (bbox_ul_x <= x && bbox_lr_x >= x && bbox_ul_y <= y && bbox_lr_y >= y) {\n      // this lever\n\n      this.game.leversChanged += 1\n\n      if (this.rotation !== 0) {\n        const { x, y, w, h } = spriteMeta['lever_2.png'].frame\n        this.spriteCoordinates = [x, y, w, h]\n        this.size = [w, h]\n        this.pos.value[1] = this.originalY\n        this.vector = new Vector(1, 0)\n        this.rotation = 0\n      } else if (x > bbox_ul_x + this.size[0] / 2) {\n        const { x, y, w, h } = spriteMeta['lever_neg45.png'].frame\n        this.spriteCoordinates = [x, y, w, h]\n        this.size = [w, h]\n        this.pos.value[1] = this.originalY + this.diagonalAdjustment\n        this.vector = new Vector(1, 1)\n        this.rotation = -45\n      } else {\n        const { x, y, w, h } = spriteMeta['lever_45.png'].frame\n        this.spriteCoordinates = [x, y, w, h]\n        this.size = [w, h]\n        this.pos.value[1] = this.originalY + this.diagonalAdjustment\n        this.vector = new Vector(1, -1)\n        this.rotation = 45\n      }\n\n      this.game.flip.play()\n    }\n  }\n\n  slide(slide) {\n    this.pos.value[0] += slide\n  }\n\n  flipTo45() {\n    const { x, y, w, h } = spriteMeta['lever_45.png'].frame\n    this.spriteCoordinates = [x, y, w, h]\n    this.size = [w, h]\n    this.pos.value[1] = this.originalY + this.diagonalAdjustment\n    this.vector = new Vector(1, -1)\n    this.rotation = 45\n    this.game.computerFlip.play()\n  }\n\n  flipToFlat() {\n    const { x, y, w, h } = spriteMeta['lever_2.png'].frame\n    this.spriteCoordinates = [x, y, w, h]\n    this.size = [w, h]\n    this.pos.value[1] = this.originalY\n    this.rotation = 0\n    this.vector = new Vector(1, 0)\n    this.game.computerFlip.play()\n  }\n}\n\nexport default Lever\n","class Sound {\n  constructor(src, max = 1, vol = 1) {\n    this.max = max\n    this.streamNum = 0\n    this.streams = []\n    for (let index = 0; index < max; index++) {\n      const sound = new Audio(src)\n      sound.volume = vol\n      this.streams.push(sound)\n    }\n  }\n\n  play() {\n    this.streamNum = (this.streamNum + 1) % this.max\n    this.streams[this.streamNum].play()\n  }\n}\n\nexport default Sound\n","/* eslint-disable operator-assignment */\nimport Constants from './constants'\nimport Sound from './sound'\nimport Vector from './vector'\nimport { randomId } from './utils'\nimport spriteMeta from '../public/assets/flipmaster_spritesheet'\n\nclass Sphere {\n  constructor(game, pos, vel) {\n    this.type = 'sphere'\n\n    this.id = randomId()\n\n    this.quadrant = null\n    this.game = game\n    this.pos = pos\n    this.vel = vel\n    this.gravity = new Vector(0, Constants.GRAVITY)\n    this.stuck = false\n\n    this.bounceCheck = null\n\n    this.img = new Image()\n    this.img.src = this.game.spriteSheet\n\n    const { x, y, w, h } = spriteMeta['sphere.png'].frame\n    this.spriteCoordinates = [x, y, w, h]\n    this.size = [w, h]\n\n    this.tick = this.tick.bind(this)\n    this.draw = this.draw.bind(this)\n    this.updateQuadrant = this.updateQuadrant.bind(this)\n    this.updateVectors = this.updateVectors.bind(this)\n    this.removeFromQuadrant = this.removeFromQuadrant.bind(this)\n    this.assessCollisionProspects = this.assessCollisionProspects.bind(this)\n\n    this.updateQuadrant()\n  }\n\n  update(ctx) {\n    this.tick(ctx)\n    this.draw(ctx)\n  }\n\n  draw(ctx) {\n    ctx.drawImage(\n      this.img,\n      ...this.spriteCoordinates,\n      this.pos.x(),\n      this.pos.y(),\n      ...this.size\n    )\n  }\n\n  tick() {\n    this.updateVectors()\n    this.checkForCollisions()\n    this.cleanup()\n  }\n\n  removeFromQuadrant() {\n    if (!this.quadrant) return\n    delete this.quadrant[this.id]\n  }\n\n  updateQuadrant() {\n    if (this.pos.x() <= 400 && this.pos.y() >= 400) {\n      this.quadrant = this.game.lowerLeft\n    } else if (this.pos.x() > 400 && this.pos.y() >= 400) {\n      this.quadrant = this.game.lowerRight\n    } else if (this.pos.x() <= 400 && this.pos.y() < 400) {\n      this.quadrant = this.game.upperLeft\n    } else {\n      this.quadrant = this.game.upperRight\n    }\n    this.quadrant[this.id] = this\n  }\n\n  updateVectors() {\n    if (this.force) {\n      this.vel = this.vel.add(this.force)\n      this.force = null\n    }\n    this.vel = this.vel.add(this.gravity)\n    this.pos = this.pos.add(this.vel)\n  }\n\n  fakeMove() {\n    const fakeData = {\n      pos: new Vector(this.pos.x(), this.pos.y()),\n      vel: new Vector(this.vel.x(), this.vel.y())\n    }\n\n    if (this.force) {\n      fakeData.vel = fakeData.vel.add(this.force)\n    }\n    fakeData.vel = fakeData.vel.add(this.gravity)\n    fakeData.pos = fakeData.pos.add(fakeData.vel)\n\n    return fakeData\n  }\n\n  applyForce(force) {\n    this.force = force\n  }\n\n  cleanup() {\n    if (this.outOfBounds()) {\n      this.game.delete(this)\n    }\n  }\n\n  outOfBounds() {\n    return (\n      this.pos.x() < 0 ||\n      this.pos.x() > 800 ||\n      this.pos.y() < -1000 ||\n      this.pos.y() > 1000\n    )\n  }\n\n  checkForCollisions() {\n    Object.values(this.game.gameAssets).forEach(asset => {\n      if (asset.id !== this.id) {\n        this.assessCollisionProspects(this, asset)\n      }\n    })\n  }\n\n  assessCollisionProspects(sphere, b) {\n    if (['timer', 'start_btn', 'game_header', 'winner'].indexOf(b.type) >= 0) {\n      return\n    }\n\n    // const nextPos = this.fakeMove()\n\n    const sphere_ul_x = sphere.pos.x()\n    const sphere_ul_y = sphere.pos.y()\n    const sphere_lr_x = sphere_ul_x + sphere.size[0]\n    const sphere_lr_y = sphere_ul_y + sphere.size[1]\n\n    const b_ul_x = b.pos.x()\n    const b_ul_y = b.pos.y()\n    const b_lr_x = b_ul_x + b.size[0]\n    const b_lr_y = b_ul_y + b.size[1]\n\n    const separate =\n      sphere_lr_x < b_ul_x ||\n      b_lr_x < sphere_ul_x ||\n      sphere_lr_y < b_ul_y ||\n      b_lr_y < sphere_ul_y\n\n    if (separate && this.bounceCheck === b.id) {\n      this.bounceCheck = null\n    }\n\n    if (separate) return\n\n    // time to look at pixel overlap\n    const overlap_ul_x = sphere_ul_x < b_ul_x ? b_ul_x : sphere_ul_x\n    const overlap_ul_y = sphere_ul_y < b_ul_y ? b_ul_y : sphere_ul_y\n    const overlap_lr_x = sphere_lr_x < b_lr_x ? sphere_lr_x : b_lr_x\n    const overlap_lr_y = sphere_lr_y < b_lr_y ? sphere_lr_y : b_lr_y\n\n    // less than pixel overlap\n    if (overlap_lr_x - overlap_ul_x < 1 || overlap_lr_y - overlap_ul_y < 1)\n      return\n\n    // create a new canvas\n    const newCanvas = document.createElement('canvas')\n    newCanvas.width = 800\n    newCanvas.height = 800\n\n    const cloneContext = newCanvas.getContext('2d')\n    cloneContext.clearRect(\n      overlap_ul_x,\n      overlap_ul_y,\n      overlap_lr_x - overlap_ul_x,\n      overlap_lr_y - overlap_ul_y\n    )\n    cloneContext.drawImage(\n      this.img,\n      ...this.spriteCoordinates,\n      sphere.pos.x(),\n      sphere.pos.y(),\n      ...this.size\n    )\n\n    const sphereImageData = cloneContext.getImageData(\n      overlap_ul_x,\n      overlap_ul_y,\n      overlap_lr_x - overlap_ul_x,\n      overlap_lr_y - overlap_ul_y\n    )\n\n    cloneContext.clearRect(\n      overlap_ul_x,\n      overlap_ul_y,\n      overlap_lr_x - overlap_ul_x,\n      overlap_lr_y - overlap_ul_y\n    )\n\n    cloneContext.drawImage(\n      b.img,\n      ...b.spriteCoordinates,\n      b.pos.x(),\n      b.pos.y(),\n      ...b.size\n    )\n\n    const bImageData = cloneContext.getImageData(\n      overlap_ul_x,\n      overlap_ul_y,\n      overlap_lr_x - overlap_ul_x,\n      overlap_lr_y - overlap_ul_y\n    )\n\n    const resolution = 4 * Constants.PIXEL_CHECK\n    for (\n      let index = 0;\n      index < sphereImageData.data.length;\n      index += resolution\n    ) {\n      if (sphereImageData.data[index + 3] && bImageData.data[index + 3]) {\n        if (b.type === 'sphere') {\n          b.vel = b.vel.flip()\n          sphere.vel = sphere.vel.flip()\n          return\n        }\n\n        if (b.type !== 'basket') {\n          if (b.type === 'lever') sphere.vel = sphere.vel.multiply(0.93)\n\n          const surfaceNormal =\n            b.type !== 'sphere' ? b.vector.normal() : b.vel.normal()\n          const dotProduct = sphere.vel.dotProduct(surfaceNormal)\n          const bounceVector = surfaceNormal.multiply(-2 * dotProduct)\n          sphere.vel = sphere.vel.add(bounceVector)\n\n          if (!this.bounceCheck || this.bounceCheck !== b.id) {\n            this.bounceCheck = b.id\n            this.game.bounce.play()\n          }\n\n          // on level surface and still going down\n          if (\n            b.type === 'lever' &&\n            b.rotation === 0 &&\n            sphere.pos.x() > b.pos.x() &&\n            sphere.pos.x() < b.pos.x() + b.size[0] &&\n            sphere.pos.y() > b.pos.y() - 10\n          ) {\n            sphere.vel = new Vector(sphere.vel.value[0], 0)\n            sphere.stuck = true\n          } else {\n            sphere.stuck = false\n          }\n\n          break\n        } else {\n          if (b.side === 'left') {\n            this.game.badBasketDrop.play()\n          } else {\n            this.game.goodBasketDrop.play()\n          }\n          b.spheres[sphere.id] = sphere.id\n          sphere.game.delete(sphere)\n        }\n      }\n    }\n  }\n\n  slide(slide) {\n    if (this.stuck) this.pos.value[0] += slide\n  }\n}\n\nexport default Sphere\n\n// Playing cards in plastic container tilt, cards movement inside 3\n","import Vector from './vector'\nimport { randomId } from './utils'\nimport spriteMeta from '../public/assets/flipmaster_spritesheet'\n\nclass StartButton {\n  constructor(game, pos) {\n    this.type = 'start_btn'\n\n    this.id = randomId()\n    this.game = game\n    this.pos = pos\n\n    this.img = new Image()\n    this.img.src = this.game.spriteSheet\n\n    const { x, y, w, h } = spriteMeta['start.png'].frame\n    this.spriteCoordinates = [x, y, w, h]\n    this.size = [w, h]\n\n    this.draw = this.draw.bind(this)\n    this.handleClick = this.handleClick.bind(this)\n    window.addEventListener('click', this.handleClick)\n  }\n\n  update(ctx) {\n    this.draw(ctx)\n  }\n\n  draw(ctx) {\n    ctx.drawImage(\n      this.img,\n      ...this.spriteCoordinates,\n      this.pos.x(),\n      this.pos.y(),\n      ...this.size\n    )\n  }\n\n  handleClick(e) {\n    e.stopPropagation()\n    const bbox_ul_x = this.pos.x()\n    const bbox_ul_y = this.pos.y()\n    const bbox_lr_x = bbox_ul_x + this.size[0]\n    const bbox_lr_y = bbox_ul_y + this.size[1]\n\n    const rect = this.game.canvas.getBoundingClientRect()\n    const x = e.clientX - rect.left\n    const y = e.clientY - rect.top\n\n    if (bbox_ul_x <= x && bbox_lr_x >= x && bbox_ul_y <= y && bbox_lr_y >= y) {\n      window.removeEventListener('click', this.handleClick)\n      this.game.start()\n    }\n  }\n\n  slide(slide) {\n    //\n  }\n}\n\nexport default StartButton\n","import Constants from './constants'\nimport Vector from './vector'\nimport { randomId } from './utils'\n\nclass Timer {\n  constructor(game, pos) {\n    this.type = 'timer'\n\n    this.id = randomId()\n\n    this.game = game\n    this.pos = pos\n\n    this.draw = this.draw.bind(this)\n  }\n\n  update(ctx) {\n    this.draw(ctx)\n  }\n\n  draw(ctx) {\n    const x = this.pos.x()\n    const y = this.pos.y()\n    ctx.fillStyle = 'rebeccapurple'\n    ctx.lineWidth = 1\n    ctx.strokeStyle = '#333'\n    ctx.beginPath()\n    const endAngle = (2 * Math.PI * 3) / 4\n    const topAngle = (-1 * Math.PI) / 2\n    const slope = (endAngle - topAngle) / (Constants.HUMAN_TIME / 1000)\n    const startAngle = slope * this.game.timeElapsed + topAngle\n\n    ctx.moveTo(x, y)\n    ctx.arc(x, y, 40, startAngle, endAngle, false)\n    ctx.lineTo(x, y)\n    ctx.fill()\n    ctx.stroke()\n    ctx.closePath()\n  }\n\n  slide() {\n    // nothing\n  }\n}\n\nexport default Timer\n","export const incrementVector = (vector, increment) =>\n  vector.map((v, i) => v + increment[i])\n\nexport const randomId = () => {\n  let id = ''\n  const letters = 'abcdefghijklmnopqrstuvwzyz'\n  for (let index = 0; index < 30; index++) {\n    const idx = Math.floor(Math.random() * 26)\n    id += letters[idx]\n  }\n  return id\n}\n","class Vector {\n  constructor(x, y) {\n    this.value = [x, y]\n  }\n\n  normal() {\n    const [a, b] = this.value\n    if (a === 0) return new Vector(b, a)\n    const demom = Math.sqrt((b / a) ** 2 + 1)\n    const x = (-1 * b) / a / demom\n    const y = 1 / demom\n    return new Vector(x, y)\n  }\n\n  x() {\n    return this.value[0]\n  }\n\n  y() {\n    return this.value[1]\n  }\n\n  mag() {\n    return Math.sqrt(this.value[0] ** 2 + this.value[1] ** 2)\n  }\n\n  dotProduct(vector) {\n    const [a, b] = this.value\n    const [x, y] = vector.value\n    return a * x + b * y\n  }\n\n  add(vector) {\n    const [a, b] = this.value\n    const [x, y] = vector.value\n    return new Vector(a + x, b + y)\n  }\n\n  multiply(scalar) {\n    const [a, b] = this.value\n    return new Vector(a * scalar, b * scalar)\n  }\n\n  flip() {\n    const [a, b] = this.value\n    return new Vector(-a, -b)\n  }\n}\n\nexport default Vector\n","import { randomId } from './utils'\n\nclass WelcomeBackground {\n  constructor(game, pos) {\n    this.type = 'welcome_bg'\n\n    this.id = randomId()\n    this.game = game\n    this.pos = pos\n\n    this.draw = this.draw.bind(this)\n  }\n\n  update(ctx) {\n    this.draw(ctx)\n  }\n\n  draw(ctx) {\n    ctx.fillStyle = '#222'\n    ctx.fillRect(this.pos.x(), this.pos.y(), 700, 600)\n  }\n\n  slide(slide) {\n    //\n  }\n}\n\nexport default WelcomeBackground\n","/* eslint-disable one-var */\n/* eslint-disable class-methods-use-this */\nimport { randomId } from './utils'\nimport spriteMeta from '../public/assets/flipmaster_spritesheet'\n\nclass Winner {\n  constructor(game, pos, win) {\n    this.type = 'winner'\n\n    this.id = randomId()\n\n    this.game = game\n    this.pos = pos\n    this.win = win\n\n    this.img = new Image()\n    this.img.src = this.game.spriteSheet\n\n    if (this.win) {\n      const { x, y, w, h } = spriteMeta['you_won.jpg'].frame\n      this.spriteCoordinates = [x, y, w, h]\n      this.size = [w, h]\n    } else {\n      const { x, y, w, h } = spriteMeta['you_lost.jpg'].frame\n      this.spriteCoordinates = [x, y, w, h]\n      this.size = [w, h]\n    }\n\n    this.handleClick = this.handleClick.bind(this)\n\n    window.addEventListener('click', this.handleClick)\n\n    this.draw = this.draw.bind(this)\n  }\n\n  update(ctx) {\n    this.draw(ctx)\n  }\n\n  draw(ctx) {\n    ctx.drawImage(\n      this.img,\n      ...this.spriteCoordinates,\n      this.pos.x(),\n      this.pos.y(),\n      ...this.size\n    )\n  }\n\n  handleClick(e) {\n    e.stopPropagation()\n\n    console.log(e.clientX)\n\n    const bbox_ul_x = this.pos.x()\n    const bbox_ul_y = this.pos.y()\n    const bbox_lr_x = bbox_ul_x + this.size[0]\n    const bbox_lr_y = bbox_ul_y + this.size[1]\n\n    const rect = this.game.canvas.getBoundingClientRect()\n    const x = e.clientX - rect.left\n    const y = e.clientY - rect.top\n\n    if (bbox_ul_x <= x && bbox_lr_x >= x && bbox_ul_y <= y && bbox_lr_y >= y) {\n      window.removeEventListener('click', this.handleClick)\n      this.game.start()\n    }\n  }\n}\n\nexport default Winner\n"],"sourceRoot":""}